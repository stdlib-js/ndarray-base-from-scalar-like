{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar emptyArray = require( '@stdlib/array-empty' );\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value and having the same data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {*} value - scalar value\n* @throws {TypeError} first argument must have a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-base-zeros' );\n*\n* var x = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var y = scalar2ndarrayLike( x, 1.0 );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns []\n*\n* var dt = y.dtype;\n* // returns 'float32'\n*\n* var v = y.get();\n* // returns 1.0\n*/\nfunction scalar2ndarrayLike( x, value ) {\n\tvar buf;\n\tvar set;\n\tvar dt;\n\n\tdt = getDType( x );\n\tif ( dt === 'binary' ) {\n\t\tbuf = allocUnsafe( 1 );\n\t} else {\n\t\tbuf = emptyArray( 1, dt );\n\t}\n\tif ( /^complex/.test( dt ) && isNumber( value ) ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( buf, 0, value );\n\treturn new x.constructor( dt, buf, [], [ 0 ], 0, getOrder( x ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = scalar2ndarrayLike;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a scalar value to a zero-dimensional ndarray having the same data type as a provided ndarray.\n*\n* @module @stdlib/ndarray-base-from-scalar-like\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-base-zeros' );\n* var scalar2ndarrayLike = require( '@stdlib/ndarray-base-from-scalar-like' );\n*\n* var x = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var y = scalar2ndarrayLike( x, 1.0 );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns []\n*\n* var dt = y.dtype;\n* // returns 'float64'\n*\n* var v = y.get();\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAkB,QAAS,6CAA8C,EACzEC,EAAiB,QAAS,oCAAqC,EAC/DC,EAAS,QAAS,2BAA4B,EAC9CC,EAAW,QAAS,4BAA6B,EACjDC,EAAW,QAAS,4BAA6B,EACjDC,EAAa,QAAS,qBAAsB,EAC5CC,EAAc,QAAS,6BAA8B,EA+BzD,SAASC,EAAoBC,EAAGC,EAAQ,CACvC,IAAIC,EACAC,EACAC,EAEJ,OAAAA,EAAKT,EAAUK,CAAE,EACZI,IAAO,SACXF,EAAMJ,EAAa,CAAE,EAErBI,EAAML,EAAY,EAAGO,CAAG,EAEpB,WAAW,KAAMA,CAAG,GAAKb,EAAUU,CAAM,IAC7CA,EAAQ,CAAEA,EAAO,CAAI,GAEjBT,EAAiBU,CAAI,EACzBC,EAAMV,EAAgBW,CAAG,EAEzBD,EAAMT,EAAQU,CAAG,EAElBD,EAAKD,EAAK,EAAGD,CAAM,EACZ,IAAID,EAAE,YAAaI,EAAIF,EAAK,CAAC,EAAG,CAAE,CAAE,EAAG,EAAGN,EAAUI,CAAE,CAAE,CAChE,CAKAV,EAAO,QAAUS,ICvCjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNumber", "isAccessorArray", "accessorSetter", "setter", "getDType", "getOrder", "emptyArray", "allocUnsafe", "scalar2ndarrayLike", "x", "value", "buf", "set", "dt", "main"]
}
