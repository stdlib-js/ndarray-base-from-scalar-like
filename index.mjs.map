{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport emptyArray from '@stdlib/array-empty';\nimport allocUnsafe from '@stdlib/buffer-alloc-unsafe';\n\n\n// MAIN //\n\n/**\n* Returns a zero-dimensional ndarray containing a provided scalar value and having the same data type as a provided ndarray.\n*\n* @param {ndarray} x - input array\n* @param {*} value - scalar value\n* @throws {TypeError} first argument must have a recognized data type\n* @returns {ndarray} ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray-base-zeros';\n*\n* var x = zeros( 'float32', [ 2, 2 ], 'row-major' );\n* // returns <ndarray>\n*\n* var y = scalar2ndarrayLike( x, 1.0 );\n* // returns <ndarray>\n*\n* var sh = y.shape;\n* // returns []\n*\n* var dt = y.dtype;\n* // returns 'float32'\n*\n* var v = y.get();\n* // returns 1.0\n*/\nfunction scalar2ndarrayLike( x, value ) {\n\tvar buf;\n\tvar set;\n\tvar dt;\n\n\tdt = getDType( x );\n\tif ( dt === 'binary' ) {\n\t\tbuf = allocUnsafe( 1 );\n\t} else {\n\t\tbuf = emptyArray( 1, dt );\n\t}\n\tif ( /^complex/.test( dt ) && isNumber( value ) ) {\n\t\tvalue = [ value, 0.0 ]; // note: we're assuming that the ComplexXXArray setter accepts an array of interleaved real and imaginary components\n\t}\n\tif ( isAccessorArray( buf ) ) {\n\t\tset = accessorSetter( dt );\n\t} else {\n\t\tset = setter( dt );\n\t}\n\tset( buf, 0, value );\n\treturn new x.constructor( dt, buf, [], [ 0 ], 0, getOrder( x ) );\n}\n\n\n// EXPORTS //\n\nexport default scalar2ndarrayLike;\n"],"names":["scalar2ndarrayLike","x","value","buf","dt","getDType","allocUnsafe","emptyArray","test","isNumber","isAccessorArray","accessorSetter","setter","constructor","getOrder"],"mappings":";;uwBA4DA,SAASA,EAAoBC,EAAGC,GAC/B,IAAIC,EAEAC,EAiBJ,OAbCD,EADW,YADZC,EAAKC,EAAUJ,IAERK,EAAa,GAEbC,EAAY,EAAGH,GAEjB,WAAWI,KAAMJ,IAAQK,EAAUP,KACvCA,EAAQ,CAAEA,EAAO,KAEbQ,EAAiBP,GACfQ,EAAgBP,GAEhBQ,EAAQR,IAEVD,EAAK,EAAGD,GACN,IAAID,EAAEY,YAAaT,EAAID,EAAK,GAAI,CAAE,GAAK,EAAGW,EAAUb,GAC5D"}